module old exposing (..)


placePositions : ApiConnection -> { a | symbol : String } -> Task Http.Error (Task Http.Error BinanceDecoder.Order)
placePositions apiConnection positionConfig =
    let
        priceTask = getPrice positionConfig.symbol
        openOrdersTask = getOpenOrders apiConnection
        accountInfoTask = getAccountInfo apiConnection
        calculatePositon price openOrders accountInfo = 
            let
                openOrdersForSymbol = 
                    List.filter (\order -> order.symbol == positionConfig.symbol) openOrders
                openOrdersQuantity = 
                    List.foldl (\order acc -> acc + order.origQty) 0.0 openOrdersForSymbol
                accountInfoForSymbol = 
                    List.filter (\asset -> asset.asset == positionConfig.symbol) accountInfo.balances
                accountInfoQuantity = 
                    case accountInfoForSymbol of
                        [] -> 0.0
                        [ asset ] -> asset.free
                positionQuantity = 
                    accountInfoQuantity - openOrdersQuantity
                positionSide =
                    if positionQuantity > 0 then
                        Sell
                    else
                        Buy
                position = 
                    { symbol = positionConfig.symbol
                    , side = positionSide
                    , quantity = abs positionQuantity
                    , price = price
                    }
            in
                position
        position = 
            Task.map3 calculatePositon priceTask openOrdersTask accountInfoTask

        makeStopLossParamString symbol side quantity stopPrice limitPrice =
            let
                sideString = 
                    case side of
                        Buy -> "BUY"
                        Sell -> "SELL"
                quantityString = String.fromFloat quantity
                stopPriceString = String.fromFloat stopPrice
                limitPriceString = String.fromFloat limitPrice
            in
                "symbol=" ++ symbol
                ++ "&side=" ++ sideString
                ++ "&type=STOP_LOSS_LIMIT"
                ++ "&quantity=" ++ quantityString
                ++ "&stopPrice=" ++ stopPriceString
                ++ "&price=" ++ limitPriceString
                ++ "&timeInForce=GTC"
        stopLossString = 
            makeStopLossParamString 
                positionConfig.symbol 
                positionConfig.side
                positionConfig.quantity 
                positionConfig.stopPrice 
                positionConfig.limitPrice

        placePositionTask : 
            BinanceDecoder.SymbolPrice -> 
            List BinanceDecoder.Order -> 
            BinanceDecoder.AccountInfo -> 
            BinanceDecoder.Timestamp -> 
            Task Http.Error BinanceDecoder.Order
        placePositionTask price openOrders accountInfo timestamp =
            Http.task
                { method = "POST"
                , headers = 
                    [ Http.header "X-MBX-APIKEY" apiConnection.key 
                    , Http.header "Content-Type" "application/json" 
                    ]
                , url = proxy ++ baseUrl ++ "order" ++ "?" ++ signParams apiConnection.secret timestamp stopLossString
                , body = Http.emptyBody
                , resolver = Http.stringResolver <| handleJsonResponse <| BinanceDecoder.orderDecoder
                , timeout = Nothing
                }
    in
        Task.map4 placePositionTask priceTask openOrdersTask accountInfoTask getTimestampTask